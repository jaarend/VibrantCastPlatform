@page "/artwork/create"
@using global::Shared.Models.Artwork;
@using global::Shared.Models.Artwork.ArtworkMapping;
@using global::Shared.Models.MediumTags;
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json.Serialization;
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigation

<PageTitle>upload new Artwork</PageTitle>

<h1>Upload Artwork</h1>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

<div class="container">
    <EditForm Model="@model" OnValidSubmit="@CreateArtwork">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Image</label>
            <InputFile id="file" class="form-control" OnChange="OnChooseFile" />
        </div>
        <div class="row">
            <img src="@imgUrl" />
        </div>

        <div class="form-group">
            <label>Title</label>
            <InputText class="form-control" @bind-Value="model.Title" />
        </div>
        <div class="form-group">
            <label>Description</label>
            <InputText class="form-control" @bind-Value="model.Description" />
        </div>
        <div class="form-group">
            <label>Address</label>
            <InputText class="form-control" @bind-Value="model.Address" />
        </div>
        <div class="form-group">
            <label>City</label>
            <InputText class="form-control" @bind-Value="model.City" />
        </div>
        <div class="form-group">
            <label>State</label>
            <InputText class="form-control" @bind-Value="model.State" />
        </div>
        <div class="form-group">
            <label>Country</label>
            <InputText class="form-control" @bind-Value="model.Country" />
        </div>
        <div class="form-group">
            <label>Postal Code</label>
            <InputText class="form-control" @bind-Value="model.PostalCode" />
        </div>
        <div class="form-group">
            <label>Materials</label>
            <InputText class="form-control" @bind-Value="model.Materials" />
        </div>
        <div class="form-group">
            <label>Mediums</label>
            <InputSelect class="form-control" @bind-Value="SelectedMediumTagId">
                @if (tags != null)
                {
                    @foreach (var _tag in tags)
                    {
                        <option value="@_tag.Id">@_tag.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Width</label>
            <InputText class="form-control" @bind-Value="model.Width" />
        </div>
        <div class="form-group">
            <label>Height</label>
            <InputText class="form-control" @bind-Value="model.Height" />
        </div>
        <div class="form-group">
            <label>Price</label>
            <InputNumber class="form-control" @bind-Value="model.Price" />
        </div>

        <button type="submit" class="btn btn-primary btn-block mt-5"> Create Artwork </button>
    </EditForm>


</div>


@code {

    private readonly ArtworkCreate model = new();

    private ArtworkDetail detail { get; set; } = new ArtworkDetail();


    private ArtworkMediumTagMapping tagMapping { get; set; } = new();

    private IEnumerable<MediumTagListName> tags;

    private int SelectedMediumTagId;

    private string errorMessage;

    private IBrowserFile selectedFile;

    private Stream _fileStream = null;
    private string _selectedFileName = null;

    private byte[] buffer;

    string imgUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        tags = await Http.GetFromJsonAsync<IEnumerable<MediumTagListName>>($"api/mediumtag/names");
    }
    
    public async Task OnChooseFile(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
            return;

        using (var stream = file.OpenReadStream(5000000)) //this is about 50MB max file size
        {
            _fileStream = new MemoryStream();
            await stream.CopyToAsync(_fileStream);
            _fileStream.Position = 0;
            _selectedFileName = file.Name;
        }

        var buffer = new byte[_fileStream.Length];
        await _fileStream.ReadAsync(buffer, 0, buffer.Length);
        var base64 = Convert.ToBase64String(buffer);

        imgUrl = $"data:image/png;base64,{base64}";
        model.FullImage = buffer;
    }


    private async Task CreateArtwork()
    {

        //get artwork Id and medium Id to pass into AddMediumTagToArtwork

        //remember to add it to the controller

        var response = await Http.PostAsJsonAsync<ArtworkCreate>("api/artwork/create", model);

        if (response.IsSuccessStatusCode)
        {
            @* var mediumTagModel = new ArtworkMediumTagMapping
{
ArtworksId = Id,
MediumTagsId = SelectedMediumTagId
};

var result = await Http.PostAsJsonAsync<ArtworkMediumTagMapping>("api/artwork/create-mediumtag", mediumTagModel); *@
            navigation.NavigateTo("/artwork");
        }
        else
        {
            errorMessage = "Could not save account information right now. Please try again.";
        }

    }


}