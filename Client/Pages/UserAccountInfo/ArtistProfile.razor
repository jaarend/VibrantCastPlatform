@page "/artist/{ArtistName}"
@using global::Shared.Models.UserAccountInfo;
@using global::Shared.Models.User;
@using global::Shared.Models.Artwork;
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@UserAccountInfo.ArtistName Profile</PageTitle>

<div class="container py-4 py-xl-5">
    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="p-xl-5 m-xl-5"><img class="rounded img-fluid w-100 fit-cover" style="min-height: 300px;"
                    src="data:image/png;base64,@Convert.ToBase64String(UserAccountInfo.ProfileImage)"
                    alt="@UserAccountInfo.ArtistName Image" /></div>
        </div>
        <div class="col-md-6 d-md-flex align-items-md-center mb-4">
            <div style="max-width: 350px;">
                <h2 class="text-uppercase font-weight-bold">@UserAccountInfo.ArtistName</h2>
                <p class="my-3">@UserAccountInfo.Description</p><a class="btn btn-primary btn-lg mr-3" role="button"
                    href="#">Message</a><a class="btn btn-outline-primary btn-lg" role="button" href="#">Website</a>
            </div>
        </div>
    </div>
</div>

<h2>Artworks by @UserAccountInfo.ArtistName</h2>
<div class="row g-3 art-grid">
    @foreach (var artwork in _artistWorks)
    {
        <div class="col-lg-4 col-md-6 mb-3">
            <a href="@($"/artwork/public/{artwork.Id}")">
                <img src="data:image/png;base64,@Convert.ToBase64String(artwork.FullImage)" alt="@artwork.Title"
                    class="img-fluid rounded artwork-image">
            </a>
            <h5 class="artwork-title">@artwork.Title</h5>
        </div>
    }
</div>



@code {

    [Parameter]
    public string ArtistName { get; set; }

    private string creatorId;

    private UserAccountInfoDetail UserAccountInfo { get; set; }

    private IEnumerable<ArtworkDetail> _artistWorks;

    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var HttpPublic = HttpClientFactory.CreateClient("HttpPublic");

        try
        {
            //this will get artist profile info based on the artistname
            UserAccountInfo = await
            HttpPublic.GetFromJsonAsync<UserAccountInfoDetail>($"/api/profile/accountinfo/artist/{ArtistName}");

            creatorId = UserAccountInfo.Id;

            //get works done by artist
            _artistWorks = await HttpPublic.GetFromJsonAsync<List<ArtworkDetail>>($"api/artwork/{creatorId}/public");
        }

        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }

        if (UserAccountInfo == null)
        {
            errorMessage = $"Couldn't find user.";
        }



    }

}