@page "/organization/signup/profile"
@using global::Shared.Models.Organization;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Forms;
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create Org Profile</PageTitle>

<h1>Create Org Profile</h1>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}

<div class="container">

    <EditForm Model="@orgProfile" OnValidSubmit="@CompleteProfile">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Image</label>
            <InputFile id="file" class="form-control" OnChange="OnChooseFile" />
            <div class="row">
                <img src="@imgUrl" />
            </div>
            <label>Tell us about your organization.</label>
            <InputText class="form-control" @bind-Value="orgProfile.OrganizationName" />
            <label>Description</label>
            <InputText class="form-control" @bind-Value="orgProfile.Description" />
            <label>Commission Price</label>
            <InputNumber class="form-control" @bind-Value="orgProfile.CommissionPrice" />
            <label>Address</label>
            <InputText class="form-control" @bind-Value="orgProfile.Address" />
            <label>City</label>
            <InputText class="form-control" @bind-Value="orgProfile.City" />
            <label>State</label>
            <InputText class="form-control" @bind-Value="orgProfile.State" />
            <label>Country</label>
            <InputText class="form-control" @bind-Value="orgProfile.Country" />
            <label>Postal Code</label>
            <InputText class="form-control" @bind-Value="orgProfile.PostalCode" />
            <label>Website</label>
            <InputText class="form-control" @bind-Value="orgProfile.Website" />
            <label>Booking Link</label>
            <InputText class="form-control" @bind-Value="orgProfile.Booking" />
            <label>Instagram</label>
            <InputText class="form-control" @bind-Value="orgProfile.Instagram" />
            <label>Facebook</label>
            <InputText class="form-control" @bind-Value="orgProfile.Facebook" />
            <label>TwitterX</label>
            <InputText class="form-control" @bind-Value="orgProfile.TwitterX" />
            <label>LinkedIn</label>
            <InputText class="form-control" @bind-Value="orgProfile.LinkedIn" />
            <label>TikTok</label>
            <InputText class="form-control" @bind-Value="orgProfile.TikTok" />
            <label>SnapChat</label>
            <InputText class="form-control" @bind-Value="orgProfile.SnapChat" />
            <label>WhatsApp</label>
            <InputText class="form-control" @bind-Value="orgProfile.WhatsApp" />

        </div>
        <button type="submit" class="btn btn-primary btn-block mt-5"> Submit </button>
    </EditForm>


</div>


@code {


    private readonly OrganizationInfoCreate orgProfile = new();

    [Parameter]
    public OrgUserMappingDetail OrgUserMappingDetail { get; set; } = new OrgUserMappingDetail();

    private string errorMessage;
    private IBrowserFile selectedFile;

    private Stream _fileStream = null;
    private string _selectedFileName = null;

    private byte[] buffer;

    string imgUrl = string.Empty;
    public async Task OnChooseFile(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file == null)
            return;

        using (var stream = file.OpenReadStream(5000000)) //this is about 50MB max file size
        {
            _fileStream = new MemoryStream();
            await stream.CopyToAsync(_fileStream);
            _fileStream.Position = 0;
            _selectedFileName = file.Name;
        }

        var buffer = new byte[_fileStream.Length];
        await _fileStream.ReadAsync(buffer, 0, buffer.Length);
        var base64 = Convert.ToBase64String(buffer);

        imgUrl = $"data:image/png;base64,{base64}";
        orgProfile.ProfileImage = buffer;
    }

    //grab the admin userId to allow profile creation

    @* protected override async Task OnInitializedAsync()
{
var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
var userIdClaim = authState.User.FindFirst("sub");

if (userIdClaim != null && !string.IsNullOrEmpty(userIdClaim.Value))
{
var userId = userIdClaim.Value;

//get the mapping info
OrgUserMappingDetail = await Http.GetFromJsonAsync<OrgUserMappingDetail>($"/api/organization/checkmapping/{userId}");

}
else
{
errorMessage = "You need to be the admin of this organization to edit.";
}

} *@

    private async void CompleteProfile()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst("sub");

        if (userIdClaim != null && !string.IsNullOrEmpty(userIdClaim.Value))
        {
            var userId = userIdClaim.Value;

            //get the mapping info
            OrgUserMappingDetail = await Http.GetFromJsonAsync<OrgUserMappingDetail>($"/api/organization/checkmapping/{userId}");

        }
        else
        {
            errorMessage = "You need to be the admin of this organization to edit.";
        }

        orgProfile.Id = OrgUserMappingDetail.OrganizationId;

        var createResponse = await Http.PostAsJsonAsync<OrganizationInfoCreate>("api/organization/profile", orgProfile);

        if (createResponse.IsSuccessStatusCode)
        {
            navigation.NavigateTo("/organization");
        }
        else
        {
            errorMessage = "Could not save account information right now. Please try again.";
        }
    }

}