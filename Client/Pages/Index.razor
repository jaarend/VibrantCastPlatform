@page "/"
@using global::Shared.Models.Artwork;
@using global::Shared.Models.UserAccountInfo;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Showcase features -->
@* could I create two views, loggedin/out for marketing then one for a user with an account*@
    <div class="container">
        <!-- Hero Section -->
        <div class="jumbotron text-center">
            <h1 class="display-4">Welcome to Our Art Gallery</h1>
            <p class="lead">Explore and discover the latest artworks.</p>
            <hr class="my-4">
            <a class="btn btn-primary btn-lg" href="/explore" role="button">Explore</a>
        </div>
    </div>
<AuthorizeView>
    <NotAuthorized>
        <p>you are not logged in</p>
    </NotAuthorized>

    <Authorized>
        <p>check out your artwork here...</p>
    </Authorized>

</AuthorizeView>



@code {

    //might not need anything here unless I want to show some art on the homepage
    private IEnumerable<ArtworkDetail> _artistWorks;
    private IEnumerable<UserAccountInfoDetail> _artists;

    protected override async Task OnInitializedAsync()
    {
        //for use when not logged in

        var HttpPublic = HttpClientFactory.CreateClient("HttpPublic");

        _artistWorks = await HttpPublic.GetFromJsonAsync<List<ArtworkDetail>>("api/artwork/public");
        _artists = await HttpPublic.GetFromJsonAsync<List<UserAccountInfoDetail>>("api/profile/accountinfo/public-users");



        @* var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity.IsAuthenticated)
        {
        _artistWorks = await Http.GetFromJsonAsync<List<ArtworkDetail>>("api/artwork");
        _artists = await Http.GetFromJsonAsync<List<UserAccountInfoDetail>>("api/profile/accountinfo/public-users");
        } *@

    }
}
