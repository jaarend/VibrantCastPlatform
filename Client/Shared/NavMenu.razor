@inject AuthenticationStateProvider AuthenticationStateProvider
@using global::Shared.Models.Organization;
@inject HttpClient Http


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">VibrantCastPlatform</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="artwork">
                <span class="oi oi-plus" aria-hidden="true"></span> Artwork
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="profile">
                <span class="oi oi-plus" aria-hidden="true"></span> Profile
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/community">
                <span class="oi oi-plus" aria-hidden="true"></span> Community
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/explore">
                <span class="oi oi-plus" aria-hidden="true"></span> Explore
            </NavLink>
        </div>
        @if(OrgUserMappingDetail.IsAdmin == true)
        {

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@($"/{orgName}/dashboard")">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> @OrgInfoDetail.OrganizationName
                </NavLink>
            </div>
        }
        <AuthorizeView Roles="Admin">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="admin">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> Admin Dashboard
                </NavLink>
            </div>
        </AuthorizeView>

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;


    //this will check if user is admin of an org

    [Parameter]
    public string orgName {get; set;}

    private int orgId;

    private string userId;
    public OrgInfoDetail OrgInfoDetail { get; set; } = new OrgInfoDetail();
    public OrgUserMappingDetail OrgUserMappingDetail { get; set; } = new OrgUserMappingDetail();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst("sub");

        if (userIdClaim != null)
        {
             var userId = userIdClaim.Value;
            //get the mapping info
            OrgUserMappingDetail = await Http.GetFromJsonAsync<OrgUserMappingDetail>($"/api/organization/checkmapping/{userId}");

            //check the user's claim, if their id matches, and is admin of organization
            if (userIdClaim != null && OrgUserMappingDetail.UserId == userId && OrgUserMappingDetail.IsAdmin == true)
            {

                orgId = OrgUserMappingDetail.OrganizationId;

                //gets details if user is admin
                OrgInfoDetail = await Http.GetFromJsonAsync<OrgInfoDetail>($"/api/organization/{orgId}");

                orgName = OrgInfoDetail.OrganizationName;

            }
            else
            {
                return;
            }
        }
        else
        {
            return;
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
